// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Item {
  id              Int             @default(autoincrement()) @id
  title           String          @db.VarChar(255)
  buyNowPrice     Decimal?        @db.Decimal(10,2)
  startingBid     Decimal         @db.Decimal(10,2)
  currentBid      Decimal         @db.Decimal(10,2)
  description     String          @db.VarChar(1000)
  pictures        Picture[]       @relation("ItemPictures") 
  seller          User            @relation(fields: [sellerId], references: [id], name: "ItemsForSale")
  sellerId        Int
  sold            Boolean         @default(false)    
  purchasedBy     User?           @relation(fields: [purchasedById], references: [id], name: "ItemsPurchased")
  purchasedById   Int?
  category        String
  condition       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  expiresAt       DateTime? 

  @@index([sellerId])
  @@index([purchasedById])
}

model User {
  id              Int             @id @default(autoincrement())
  name            String?
  username        String?          @unique
  password        String?
  email           String          @unique
  emailVerified   DateTime?
  itemsForSale    Item[]          @relation("ItemsForSale")
  // itemsSold     query itemsForSale where sold: true  
  itemsPurchased  Item[]          @relation("ItemsPurchased")  
  userAddresses   UserAddress[]
  image           String?
  accounts        Account[]
  sessions        Session[]
}

model Address {
  id              Int             @id @default(autoincrement())
  city            String
  state           String
  zip             Int
  street          String
  userAddresses   UserAddress[]
}

model UserAddress {
  id              Int             @id @default(autoincrement())                 // delete addresses if user deleted
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  address         Address         @relation(fields: [addressId], references: [id])
  addressId       Int
  addressType     String          // billing or shipping

  @@index([userId])
  @@index([addressId])
}

model Picture {
  id              Int             @id @default(autoincrement())
  url             String
  altText         String?                                                                 // delete pics if item deleted
  item            Item            @relation(fields: [itemId], references: [id], name: "ItemPictures", onDelete: Cascade)
  itemId          Int

  @@index([itemId])
}

// for NextAuth
model Account {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
  type               String
  provider           String  
  providerAccountId  String   @map("provider_providerAccountId")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  @@index([userId])
  @@unique([provider, providerAccountId])
}

// for NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  expires      DateTime

  @@index([userId])
}