// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Item {
  id              Int             @default(autoincrement()) @id
  title           String          @db.VarChar(255)
  buyNowPrice     Decimal?        @db.Decimal(10,2)
  startingBid     Decimal         @db.Decimal(10,2)
  currentBid      Decimal         @db.Decimal(10,2)
  description     String
  pictures        Picture[]       @relation("ItemPictures") 
  seller          User            @relation(fields: [sellerId], references: [id], name: "ItemsForSale")
  sellerId        Int
  soldBy          User            @relation(fields: [soldById], references: [id], name: "ItemsSold")
  soldById        Int
  purchasedBy     User            @relation(fields: [purchasedById], references: [id], name: "ItemsPurchased")
  purchasedById   Int
  category        String
  condition       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  expiresAt       DateTime? 
}

model User {
  id              Int             @id @default(autoincrement())
  username        String          @unique
  password        String
  email           String          @unique
  itemsForSale    Item[]          @relation("ItemsForSale")
  itemsSold       Item[]          @relation("ItemsSold")
  itemsPurchased  Item[]          @relation("ItemsPurchased")  
  userAddresses   UserAddress[]
}

model Address {
  id              Int             @id @default(autoincrement())
  city            String
  state           String
  zip             Int
  street          String
  userAddresses   UserAddress[]
}

model UserAddress {
  id              Int             @id @default(autoincrement())                 // delete addresses if user deleted
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  address         Address         @relation(fields: [addressId], references: [id])
  addressId       Int
  addressType     String          // billing or shipping
}

model Picture {
  id              Int             @id @default(autoincrement())
  url             String
  altTag          String                                                                 // delete pics if item deleted
  item            Item            @relation(fields: [itemId], references: [id], name: "ItemPictures", onDelete: Cascade)
  itemId          Int
}